
#include "genlist_macro.edc"
#define POPUP_CONTENT_DEFAULT_PADDING_LEFT_MIN_INC 23
#define POPUP_EDITFIELD_LAYOUT_MINMAX_HEIGHT_INC 154
#define DEMO_POPUP_PROCESSINGVIEW1BUTTON_CONTENT_MIN 0 144


//****************************************************************************//
// Tabbar
//****************************************************************************//
#define TABBAR_TWO_ITEMS_SIZE_INC 240 0;
#define TABBAR_SELECTED_LINE_SIZE_INC 0 3
#define TABBAR_TEXT_LEFT_TOP_PADDING_SIZE_INC 8 18
#define TABBAR_TEXT_RIGHT_BOTTOM_PADDING_SIZE_INC 8 14
#define TABBAR_ICON_TEXT_LAND_LEFT_TOP_PADDING_SIZE_INC 8 20
#define TABBAR_ICON_TEXT_LAND_RIGHT_BOTTOM_PADDING_SIZE_INC 8 14
#define TABBAR_ICON_RECT_SIZE_INC 61 46
#define ITEM_STATE_ENABLED 0
#define ITEM_STATE_DISABLED 1
#define CALL_SETTING_TABBAR_ICON_TEXT_PAD_INC 15 0
#define CALL_SETTING_TABBAR_ICON_SIZE_INC 32 32

// Multiline style
#define LIST_WRAP_PADDING_LEFT_SIZE         15
#define LIST_WRAP_PADDING_RIGHT_SIZE        15
#define LIST_WRAP_PADDING_TOP_SIZE          14
#define LIST_WRAP_PADDING_BOTTOM_SIZE       14
#define LIST_MULTILINE_ICON_SIZE1           40 40
#define LIST_PADDING_CENTER_LEFT_SIZE       15
#define LIST_PADDING_CENTER_RIGHT_SIZE      15
#define LIST_TEXT_MAIN_HEIGHT               38

//size
#define LIST_TEXT_MAIN_SIZE                 30

//Expand style
#define GENLIST_TREESIZE_DEFAULT            22

#define STYLE_TAGS \
   tag:  "br" "\n";\
   tag:  "ps" "ps";\
   tag:  "tab" "\t";\
   tag:  "b" "+ font_weight=Bold";

#define STYLE_TAG_MATCH \
   tag:  "match" "+ color=#ffffff color_class=T1067";

#define TABBAR_ITEM_TEXT_STYLE(_font_size, _font_class) \
	style { name: "tabbar_icon_text_style_"_font_class; \
		base: "font=Tizen:style=regular font_size="_font_size" align=center color=#FFFFFF wrap=word ellipsis=-1 text_class=T111 color_class="_font_class" linegap=0"; \
		STYLE_TAGS \
	}

#define TABBAR_TEXT_STYLE(_font_size, _font_class) \
	style { name: "tabbar_text_style_"_font_class; \
		base: "font=Tizen:style=regular font_size="_font_size" align=center color=#FFFFFF wrap=word ellipsis=1 text_class=T1117 color_class="_font_class" linegap=0"; \
		STYLE_TAGS \
	}

/************************* START OF FDN CALL BTN CHANGES **************************/

#define STYLE_FDN_LIST_CALL_BUTTON(grp_name, bg, bg_press, bg_dim, bg_w, bg_h, img, img_press, img_dim, img_w, img_h) \
	group { name: "elm/button/base/"grp_name; \
		data { \
			item: "focus_highlight" "on"; \
		} \
		images { \
			image: bg COMP; \
			image: bg_press COMP; \
			image: bg_dim COMP; \
			image: img COMP; \
			image: img_press COMP; \
			image: img_dim COMP; \
			image: "cst_vc_btn_bg_focus.png" COMP; \
		} \
		script { \
			public button_state = 0; \
		} \
		parts { \
			part { name: "button_image"; \
				type: IMAGE; \
				scale: 1; \
				description { state: "default" 0.0; \
					min: bg_w bg_h; \
					max: bg_w bg_h; \
					image { \
						normal: bg; \
					} \
				} \
				description { state: "clicked" 0.0; \
					inherit: "default" 0.0; \
					image.normal: bg_press; \
				} \
				description { state: "disabled" 0.0; \
					inherit: "default" 0.0; \
					image.normal: bg_dim; \
				} \
			} \
			part { name: "focus_image"; \
				mouse_events: 0; \
				repeat_events: 1; \
				description { state: "default" 0.0; \
					visible: 0; \
					rel1.to : "button_image"; \
					rel2.to : "button_image"; \
					image { \
						normal: "cst_vc_btn_bg_focus.png"; \
					} \
				} \
				description { state: "focused" 0.0; \
					inherit: "default" 0.0; \
					visible: 1; \
				} \
			} \
			part { name: "content_image"; \
				scale: 1; \
				description { state: "default" 0.0; \
					min: img_w img_h; \
					max: img_w img_h; \
					image { \
						normal: img; \
					} \
					visible: 1; \
				} \
				description { state: "clicked" 0.0; \
					inherit: "default" 0.0; \
					image.normal: img_press; \
				} \
				description { state: "disabled" 0.0; \
					inherit: "default" 0.0; \
					image.normal: img_dim; \
				} \
			} \
			part { name: "over2"; \
				type: RECT; \
				repeat_events: 1; \
				ignore_flags: ON_HOLD; \
				description { state: "default" 0.0; \
					color: 0 0 0 0; \
				} \
			} \
			part { name: "over3"; \
				type: RECT; \
				repeat_events: 1; \
				description { state: "default" 0.0; \
					color: 0 0 0 0; \
				} \
			} \
			part { name: "disabler"; \
				type: RECT; \
				description { state: "default" 0.0; \
					color: 0 0 0 0; \
					visible: 0; \
				} \
				description { state: "disabled" 0.0; \
					inherit: "default" 0.0; \
					visible: 1; \
				} \
			} \
		} \
		programs { \
			program { name: "button_click"; \
				signal: "mouse,down,1"; \
				source: "over3"; \
				action: SIGNAL_EMIT "elm,action,press" ""; \
				after: "button_click_anim"; \
			} \
			program { name: "button_click_anim"; \
				action: STATE_SET "clicked" 0.0; \
				target: "button_image"; \
				target: "content_image"; \
			} \
			program { name: "button_double_click"; \
				signal: "mouse,down,1,double"; \
				source: "over3"; \
				after: "button_click_anim"; \
			} \
			program { name: "button_unpress"; \
				action: SIGNAL_EMIT "elm,action,unpress" ""; \
			} \
			program { name: "button_mouseout_clicked"; \
				signal: "mouse,up,1"; \
				source: "over3"; \
				script { \
				if (get_int(button_state) != 1) \
					set_state(PART:"button_image", "default", 0.0); \
					set_state(PART:"content_image", "default", 0.0); \
				} \
				after: button_unpress; \
			} \
			program { name: "touch_snd"; \
				signal: "mouse,clicked,1"; \
				source: "over2"; \
				after: button_unclick3; \
			} \
			program { name: "button_unclick3"; \
				action: SIGNAL_EMIT "elm,action,click" ""; \
			} \
			program { name: "disable"; \
				signal: "elm,state,disabled"; \
				source: "elm"; \
				action: STATE_SET "disabled" 0.0; \
				target: "button_image"; \
				target: "content_image"; \
				target: "disabler"; \
			} \
			program { name: "enable"; \
				signal: "elm,state,enabled"; \
				source: "elm"; \
				action: STATE_SET "default" 0.0; \
				target: "button_image"; \
				target: "content_image"; \
				target: "disabler"; \
			} \
			program { name: "action_focus"; \
				signal: "elm,action,focus_highlight,show"; \
				source: "elm"; \
				action: STATE_SET "focused" 0.0; \
				target: "focus_image"; \
			} \
			program { name: "action_unfocus"; \
				signal: "elm,action,focus_highlight,hide"; \
				source: "elm"; \
				action: STATE_SET "default" 0.0; \
				target: "focus_image"; \
			} \
		} \
	}

/************************* SIM BTN STYLE **************************/
#define STYLE_SIM_BUTTON(grp_name, sim_no_img, sim_color) \
	group { name: "elm/button/base/"grp_name; \
		images { \
			image: "call_setting_sim_bg.png" COMP; \
			image: "logs_icon_sim_container.png" COMP; \
			image: sim_no_img COMP; \
		} \
		script { \
			public button_state = 0; \
			public back_to_unselected() { \
				set_state(PART:"background", "default", 0.0); \
				set_state(PART:"elm.text", "default", 0.0); \
				set_state(PART:"icon_bg", "default", 0.0); \
				set_state(PART:"select_indicator", "default", 0.0); \
			} \
			public back_to_selected() { \
				set_state(PART:"background", "default", 0.0); \
				set_state(PART:"elm.text", "selected", 0.0); \
				set_state(PART:"icon_bg", "selected", 0.0); \
				set_state(PART:"select_indicator", "selected", 0.0); \
			} \
		} \
		parts { \
		     part { name: "background"; \
				type: RECT; \
				mouse_events: 1; \
				scale: 1; \
				description { state: "default" 0.0; \
					visible: 1; \
					color_class: B0514; \
				} \
				description { state: "pressed" 0.0; \
					inherit: "default" 0.0; \
					visible: 1; \
					color_class: B0514P; \
				} \
				description { state: "disabled" 0.0; \
					inherit: "default" 0.0; \
				} \
				description { state: "focused" 0.0; \
					inherit: "default" 0.0; \
				} \
				description { state: "unfocused" 0.0; \
					inherit: "default" 0.0; \
				} \
			} \
			part { name: "icon_part"; \
				type: RECT; \
				description { state: "default" 0.0; \
					visible: 1; \
					align: 1.0 0.5; \
					max: 46 46; \
					rel1 { relative: 0 ((72-46)/2)/72; to: "background";} \
					rel2 { relative: 0 (((72-46)/2)+46)/72; to: "txt_padding";} \
					color: 0 0 0 0;\
					visible: 1; \
				} \
			} \
			part { name: "icon_bg"; \
				description { state: "default" 0.0; \
					visible: 1; \
					image { \
						normal: "call_setting_sim_bg.png"; \
					} \
					align: 0.5 0.5; \
					rel1 { relative: 0 0; to: "icon_part";} \
					rel2 { relative: 1 1; to: "icon_part";} \
					aspect_preference: SOURCE; \
					color_class: B052L6D;\
					visible: 1; \
				} \
				description { state: "pressed" 0.0; \
					inherit: "default" 0.0; \
					color_class: B052L6P;\
				} \
				description { state: "selected" 0.0; \
					inherit: "default" 0.0; \
					color_class: B052L6S;\
				} \
			} \
			part { name: "icon_container"; \
				description { state: "default" 0.0; \
					visible: 1; \
					image { \
						normal: "logs_icon_sim_container.png"; \
					} \
					align: 0.5 0.5; \
					rel1 { relative: ((46-32)/2)/46 ((46-32)/2)/46; to: "icon_part";} \
					rel2 { relative: ((46-32)/2+32)/46 ((46-32)/2+32)/46; to: "icon_part";} \
					aspect_preference: SOURCE; \
					color_class: sim_color;\
					visible: 1; \
				} \
			} \
			part { name: "icon_sim_no"; \
				description { state: "default" 0.0; \
					visible: 1; \
					image { \
						normal: sim_no_img; \
					} \
					align: 0.5 0.5; \
					rel1 { relative: ((46-32)/2)/46 ((46-32)/2)/46; to: "icon_part";} \
					rel2 { relative: ((46-32)/2+32)/46 ((46-32)/2+32)/46; to: "icon_part";} \
					aspect_preference: SOURCE; \
					color_class: "AO002";\
					visible: 1; \
				} \
			} \
			part { name: "txt_padding"; \
				type: SPACER; \
				scale: 1; \
				description { \
					state: "default" 0.0; \
					fixed: 1 0; \
					min: 18 0; \
					align: 1 0; \
					rel1 { relative: 0 0; to: "elm.text";} \
					rel2 { relative: 0 1; to_x: "elm.text";to_y: "background"; } \
				} \
			} \
			part { name: "elm.text"; \
				type: TEXT; \
				mouse_events: 0; \
				scale: 1; \
				description { state: "default" 0.0; \
					visible: 1; \
					fixed: 1 1; \
					rel1{relative: (0.5+((46+18)/(240*2))) 18/72; to: "background";} \
					rel2{relative: (0.5+((46+18)/(240*2))) (18+36)/72; to:"background";} \
					text { \
						text_class: T1117D; \
						min: 1 1; \
						ellipsis: -1; \
						align: 0.0 0.5; \
					} \
					color_class: T1117D; \
				} \
				description { state: "visible" 0.0; \
					inherit: "default" 0.0; \
					visible: 1; \
				} \
				description { state: "pressed" 0.0; \
					inherit: "default" 0.0; \
					visible: 1; \
					text { \
						text_class: T1117P; \
					} \
					color_class: T1117P; \
					min: 1 1; \
				} \
				description { state: "selected" 0.0; \
					inherit: "default" 0.0; \
					visible: 1; \
					text { \
						text_class: T1117S; \
					} \
					color_class: T1117S; \
					min: 1 1; \
				} \
				description { state: "disabled" 0.0; \
					inherit: "default" 0.0; \
					text { \
						text_class: T1117D; \
					} \
					color_class: T1117D; \
				} \
				description { state: "disabled_visible" 0.0; \
					inherit: "default" 0.0; \
					text { \
						text_class: T1117D; \
					} \
					color_class: T1117D; \
					visible: 1; \
				} \
				description { state: "focused" 0.0; \
					inherit: "default" 0.0; \
					visible: 1; \
					min: 1 1; \
				} \
				description { state: "unfocused" 0.0; \
					inherit: "default" 0.0; \
					visible: 1; \
					min: 1 1; \
				} \
			} \
			part { name: "select_indicator"; \
				type: RECT; \
				description { state: "default" 0.0; \
					visible: 1; \
					align: 0.5 0.5; \
					rel1{relative: 0 (18+36+1)/72; to_x: "elm.text"; to_y: "background";} \
					rel2{relative: 1 (18+36+1+3)/72; to_x: "elm.text"; to_y:"background";} \
					color_class: "B0514S";\
					visible: 0; \
				} \
				description { state: "pressed" 0.0; \
					inherit: "default" 0.0; \
					visible: 0; \
				} \
				description { state: "selected" 0.0; \
					inherit: "default" 0.0; \
					visible: 1; \
				} \
			} \
			part { name: "over2"; \
				type: RECT; \
				mouse_events: 1; \
				repeat_events: 1; \
				ignore_flags: ON_HOLD; \
				description { state: "default" 0.0; \
					color: 0 0 0 0; \
					rel1 { relative: 0.25 0.1; } \
					rel2 { relative: 0.75 0.9; } \
				} \
			} \
			part { name: "over3"; \
				type: RECT; \
				mouse_events: 1; \
				repeat_events: 1; \
				description { state: "default" 0.0; \
					color: 0 0 0 0; \
					rel1 { relative: 0.25 0.1; } \
					rel2 { relative: 0.75 0.9; } \
				} \
			} \
			part { name: "disabler"; \
			   type: RECT; \
			   description { state: "default" 0.0; \
				  rel1 { relative: 0.25 0.1; } \
				  rel2 { relative: 0.75 0.9; } \
			      color: 0 0 0 0; \
			      visible: 0; \
			   } \
			   description { state: "disabled" 0.0; \
			      inherit: "default" 0.0; \
			      visible: 1; \
			   } \
			} \
		} \
		programs { \
			program { name: "button_pressed"; \
				signal: "mouse,down,1"; \
				source: "over2"; \
				action: STATE_SET "pressed" 0.0; \
				target: "background"; \
				target: "elm.text"; \
				target: "icon_bg"; \
				target: "select_indicator"; \
			} \
			program { name: "button_unpress"; \
				signal: "mouse,up,1"; \
				source: "over3"; \
				script { \
					if (get_int(button_state) == 0) \
						back_to_unselected(); \
					else \
						back_to_selected(); \
				} \
			} \
			program { name: "button_clicked"; \
				signal: "mouse,clicked,1"; \
				source: "over2"; \
				action: PLAY_SAMPLE "touch_sound" 1.0; \
				action: SIGNAL_EMIT "elm,action,click" ""; \
				after: "selected"; \
			} \
			program { name: "disable"; \
				signal: "elm,state,disabled"; \
				source: "elm"; \
				action: STATE_SET "disabled" 0.0; \
				target: "background"; \
				target: "elm.text"; \
				target: "disabler"; \
			} \
			program { name: "enable"; \
				signal: "elm,state,enabled"; \
				source: "elm"; \
				action: STATE_SET "default" 0.0; \
				target: "background"; \
				target: "elm.text"; \
				target: "select_indicator"; \
				target: "disabler"; \
			} \
			program { name: "action_focus"; \
				signal: "elm,action,focus_highlight,show"; \
				source: "elm"; \
				action: STATE_SET "focused" 0.0; \
				target: "background"; \
				target: "elm.text"; \
			} \
			program { name: "action_unfocus"; \
				signal: "elm,action,focus_highlight,hide"; \
				source: "elm"; \
				action: STATE_SET "unfocused" 0.0; \
				target: "background"; \
				target: "elm.text"; \
			} \
			program { name: "selected"; \
				signal: "selected"; \
				source: ""; \
				script { \
					set_int(button_state, 1); \
				} \
				action: STATE_SET "selected" 0.0; \
				target: "select_indicator"; \
				target: "elm.text"; \
				target: "icon_bg"; \
			} \
			program { name: "unselected"; \
				signal: "unselected"; \
				source: ""; \
				script { \
					set_int(button_state, 0); \
				} \
				action: STATE_SET "default" 0.0; \
				target: "select_indicator"; \
				target: "elm.text"; \
				target: "icon_bg"; \
			} \
		} \
	}

/************************* END OF FDN CALL BTN CHANGES **************************/


collections {
   base_scale: 2.6;
   color_classes {
      color_class {
         name: "transparent";
         color: 0 0 0 0;
      }
   }

styles{
   TABBAR_ITEM_TEXT_STYLE(14, "T111")
   TABBAR_ITEM_TEXT_STYLE(14, "T111P")
   TABBAR_ITEM_TEXT_STYLE(14, "T111S")
   TABBAR_ITEM_TEXT_STYLE(14, "T111D")
   TABBAR_TEXT_STYLE(18, "T1117")
   TABBAR_TEXT_STYLE(18, "T1117P")
   TABBAR_TEXT_STYLE(18, "T1117S")
   TABBAR_TEXT_STYLE(18, "T1117D")
}

	sounds {
		sample {
			name: "touch_sound" RAW;
			source: "Tizen_Touch.wav";
		}
	}

	group { name: "elm/layout/popup/entrypasswordview_with_show_password";
	   parts {
	      part { name: "pad_t";
	         type: SPACER;
	         scale: 1;
	         description { state: "default" 0.0;
	            align: 0.5 0.0;
	            min: 0 32;
	            fixed: 0 1;
	            rel1 {
	               relative: 1.0 0.0;to_x: "pad_l";
	            }
	            rel2 {
	               relative: 0.0 0.0;to_x: "pad_r";
	            }
	         }
	      }
	      part { name: "pad_l";
	         type: SPACER;
	         scale: 1;
	         description { state: "default" 0.0;
	            min: 32 0;
	            max: 32 0;
	            fixed: 1 0;
	            rel1 {
	               relative: 0.0 0.0;
	            }
	            rel2 {
	               relative: 0.0 1.0;
	            }
	            align: 0.0 0.0;
	         }
	      }
	      part { name: "pad_r";
	         type: SPACER;
	         scale: 1;
	         description { state: "default" 0.0;
	            min: 32 0;
	            max: 32 0;
	            fixed: 1 0;
	            rel1 {
	               relative: 1.0 0.0;
	            }
	            rel2 {
	               relative: 1.0 1.0;
	            }
	            align: 1.0 0.0;
	         }
	      }
	      part { name: "elm.swallow.content";
	         type: SWALLOW;
	         scale: 1;
	         description { state: "default" 0.0;
	            fixed: 1 0;
	            rel1 {
	               relative: 1.0 1.0;
	               to_x: "pad_l";
	               to_y: "pad_t";
	            }
	            rel2 {
	               relative: 0.0 0.0;
	               to_x: "pad_r";
	               to_y: "pad_b";
	            }
	         }
	      }
	      part { name: "bottom_pad";
	         type: SPACER;
	         scale: 1;
	         description { state: "default" 0.0;
	            align: 0.0 1.0;
	            min: 0 32;
	            fixed: 0 1;
	            rel1 {
	               relative: 1.0 1.0;
	               to_x: "pad_l";
	            }
	            rel2 {
	               relative: 0.0 1.0;
	               to_x: "pad_r";
	            }
	         }
	      }
	      part { name: "pad_b";
	         type: SPACER;
	         scale: 1;
	         description { state: "default" 0.0;
	            align: 0.0 1.0;
	            min: 0 60;
	            fixed: 0 1;
	            rel1 {
	               relative: 0.0 0.0;
	               to: "bottom_pad";
	            }
	            rel2 {
	               relative: 1.0 0.0;
	               to: "bottom_pad";
	            }
	         }
	      }
	      part { name: "end_field";
	         type: SPACER;
	         scale: 1;
	         description { state: "default" 0.0;
	            align: 0.0 1.0;
	            min: 0 20;
	            fixed: 0 1;
	            rel1 {
	               relative: 0.0 1.0;
	               to: "pad_b";
	            }
	            rel2 {
	               relative: 1.0 1.0;
	               to: "pad_b";
	            }
	         }
	      }
	      part { name: "elm.swallow.end";
	         type: SWALLOW;
	         scale: 1;
	         description { state: "default" 0.0;
	            fixed: 1 1;
	            align: 0.0 0.5;
	            rel1.to: "end_field";
	            rel2.to: "end_field";
	         }
	      }
	   }
	}

	group { name: "elm/layout/popup/entrypasswordview";
	   parts {
	      part { name: "pad_l";
	         type: SPACER;
	         scale: 1;
	         description { state: "default" 0.0;
	            min: POPUP_CONTENT_DEFAULT_PADDING_LEFT_MIN_INC 0;
	            fixed: 1 0;
	            rel1.relative: 0.0 0.0;
	            rel2.relative: 0.0 1.0;
	            align: 0.0 0.0;
	         }
	      }
	      part { name: "pad_r";
	         type: SPACER;
	         scale: 1;
	         description { state: "default" 0.0;
	            min: POPUP_CONTENT_DEFAULT_PADDING_LEFT_MIN_INC 0;
	            fixed: 1 0;
	            rel1.relative: 1.0 0.0;
	            rel2.relative: 1.0 1.0;
	            align: 1.0 0.0;
	         }
	      }
	      part { name: "elm.swallow.content";
	         type: SWALLOW;
	         scale: 1;
	         description { state: "default" 0.0;
	            min: 0 POPUP_EDITFIELD_LAYOUT_MINMAX_HEIGHT_INC;
	            max: -1 POPUP_EDITFIELD_LAYOUT_MINMAX_HEIGHT_INC;
	            align: 0.5 0.5;
	            rel1{
	               relative: 1.0 0.0 ;
	               to_x: "pad_l";
	            }
	            rel2{
	               relative: 0.0 1.0;
	               to_x: "pad_r";
	            }
	         }
	      }
	   }
	}
	group { name: "elm/layout/popup/callforwardingview";
	   parts {
	      part { name: "pad_l";
	         type: SPACER;
	         scale: 1;
	         description { state: "default" 0.0;
	            min: POPUP_CONTENT_DEFAULT_PADDING_LEFT_MIN_INC 0;
	            fixed: 1 0;
	            rel1.relative: 0.0 0.0;
	            rel2.relative: 0.0 1.0;
	            align: 0.0 0.0;
	         }
	      }
	      part { name: "pad_r";
	         type: SPACER;
	         scale: 1;
	         description { state: "default" 0.0;
	            min: POPUP_CONTENT_DEFAULT_PADDING_LEFT_MIN_INC 0;
	            fixed: 1 0;
	            rel1.relative: 1.0 0.0;
	            rel2.relative: 1.0 1.0;
	            align: 1.0 0.0;
	         }
	      }
	      part { name: "elm.swallow.content";
	         type: SWALLOW;
	         scale: 1;
	         description { state: "default" 0.0;
	            min: 0 POPUP_EDITFIELD_LAYOUT_MINMAX_HEIGHT_INC;
	            max: -1 POPUP_EDITFIELD_LAYOUT_MINMAX_HEIGHT_INC;
	            align: 0.5 0.5;
	            rel1{
	               relative: 1.0 0.0 ;
	               to_x: "pad_l";
	            }
	            rel2{
	               relative: 0.0 1.0;
	               to_x: "pad_r";
	            }
	         }
	      }
	   }
	}
	///////////This style is for voice-call button from FDN Contact List////////////////////
	STYLE_FDN_LIST_CALL_BUTTON("style_fdn_list_call_btn", "cst_vc_btn_bg.png", "cst_vc_btn_bg_press.png", "cst_vc_btn_bg_dim.png", 72, 72,
		"cst_vc_btn.png", "cst_vc_btn.png", "cst_vc_btn.png", 45, 45)

/*************************************Transparent Contact button view with touch sound********************/
  plugins {
	plugin {
		name: "touch_sound"; // Name run by RUN_PLUGIN
		source: "feedback"; // External edje plugin name
		param: "FEEDBACK_TYPE_SOUND FEEDBACK_PATTERN_TAP";
	}
  }
   group{ name: "elm/button/base/cst_transparent";
	script {
		public mouse_down = 0;
		public multi_down = 0;
	}
	parts {
		part { name: "bg";
			type: SPACER;
			scale: 1;
			description {
				state: "default" 0.0;
			}
			description { state: "disabled" 0.0;
				inherit: "default" 0.0;
			}
		}
		part { name: "elm.swallow.content";
			type: SWALLOW;
			scale: 1;
			description {
				state: "default" 0.0;
			}
		}
		part { name: "event";
			type: RECT;
			scale: 1;
			/* Do not remove the following line.
			 * elm.swallow.content part should receive mouse events. */
			repeat_events: 1;
			description {
				state: "default" 0.0;
				color: 0 0 0 0;
			}
		}
	}
	programs {
		program { name: "pressed";
			signal: "mouse,down,1*";
			source: "event";
			script {
				if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0)) {
					set_int(mouse_down, 1);
					run_program(PROGRAM:"button_press1");
				}
			}
		}
		program { name: "button_press1";
			script {
			   new st[31];
			   new Float:vl;
			   get_state(PART:"bg", st, 30, vl);
			   if (strcmp(st, "disabled")) {
			      emit("elm,action,press", "");
			   }
			}
		}
		program { name: "unpressed";
			signal: "mouse,up,1";
			source: "event";
			script {
			   if (get_int(mouse_down) == 1) {
			     set_int(mouse_down, 0);
			     run_program(PROGRAM:"button_unpress1");
			   }
			}
		}
		program { name: "button_unpress1";
		    script {
		       new st[31];
		       new Float:vl;
		       get_state(PART:"bg", st, 30, vl);
		       if (strcmp(st, "disabled")) {
		          emit("elm,action,unpress", "");
		       }
		    }
		}
		program { name: "clicked";
			signal: "mouse,clicked,1";
			source: "event";
			script {
				new st[31];
				new Float:vl;
				if (get_int(multi_down) == 0) {
					get_state(PART:"bg", st, 30, vl);
					if (strcmp(st, "disabled")) {
						run_program(PROGRAM:"touch_sound");
						emit("elm,action,click", "");
					}
				}
			}
		}
		program { name: "touch_sound";
			action: RUN_PLUGIN "touch_sound";
		}
		program { name: "disable";
			signal: "elm,state,disabled";
			source: "elm";
			action: STATE_SET "disabled" 0.0;
			target: "bg";
		}
		program { name: "enable";
			signal: "elm,state,enabled";
			source: "elm";
			action: STATE_SET "default" 0.0;
			target: "bg";
		}
		program { name: "multi_down";
			signal: "elm,action,multi,down";
			source: "elm";
			script {
				set_int(multi_down, 1);
			}
		}
		program { name: "multi_up";
			signal: "elm,action,multi,up";
			source: "elm";
			script {
				set_int(multi_down, 0);
			}
		}
	}
}
/*************************************Transparent Contact button view with touch sound END********************/

group { name: "elm/toolbar/item/tabbar_with_title_custom";
	script {
		public selected = 0;
		public pressed = 0;
		public item_state = ITEM_STATE_ENABLED;
		public items_number = 0;
		public icon_text = 0;
		public mouse_down = 0;
		public multi_down = 0;
		public landscape = 0;
		public item_text = 0;
	}
	parts {
		part { name: "bg";
			type: SPACER;
			scale: 1;
			mouse_events: 0;
			description { state: "default" 0.0;
			}
			description { state: "2items" 0.0;
				inherit: "default" 0.0;
				min: TABBAR_TWO_ITEMS_SIZE_INC;
			}
		}
		part { name: "selected_line";
			type: RECT;
			scale: 1;
			mouse_events: 0;
			description { state: "default" 0.0;
				rel1 {
					to_x: "elm.text";
					to_y: "elm.text";
					relative: 0.0 1.0;
				}
				rel2 {
					to: "elm.text";
					relative: 1.0 1.0;
				}
				fixed: 0 1;
				min: TABBAR_SELECTED_LINE_SIZE_INC;
				visible: 0;
				color_class: "B0514S";
				align: 0.5 0.0;
			}
			description { state: "selected" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}
		part { name: "bg_cover";
			type: RECT;
			scale: 1;
			mouse_events: 0;
			description { state: "default" 0.0;
				visible: 0;
				color_class: "B0514";
			}
			description { state: "pressed" 0.0;
				inherit: "default" 0.0;
				visible: 1;
				color_class: "B0514P";
			}
			description { state: "disabled" 0.0;
				inherit: "default" 0.0;
				visible: 0;
			}
		}
		part { name: "padding_left_top";
			type: SPACER;
			scale: 1;
			mouse_events: 0;
			description { state: "default" 0.0;
				align: 0.0 0.0;
				rel2.relative: 0.0 0.0;
				min: 0 0;
				fixed: 1 1;
			}
			description { state: "text" 0.0;
				inherit: "default" 0.0;
				min: TABBAR_TEXT_LEFT_TOP_PADDING_SIZE_INC;
			}
			description { state: "icon_text" 0.0;
				inherit: "default" 0.0;
				min: TABBAR_ICON_TEXT_LAND_LEFT_TOP_PADDING_SIZE_INC;
			}
		}
		part { name: "padding_right_bottom";
			type: SPACER;
			scale: 1;
			mouse_events: 0;
			description { state: "default" 0.0;
				align: 1.0 1.0;
				rel1.relative: 1.0 1.0;
				min: 0 0;
				fixed: 1 1;
			}
			description { state: "text" 0.0;
				inherit: "default" 0.0;
				min: TABBAR_TEXT_RIGHT_BOTTOM_PADDING_SIZE_INC;
			}
			description { state: "icon_text" 0.0;
				inherit: "default" 0.0;
				min: TABBAR_ICON_TEXT_LAND_RIGHT_BOTTOM_PADDING_SIZE_INC;
			}
		}
		part {
			name: "icon_rect";
			type: SPACER;
			scale: 1;
			mouse_events: 0;
			description { state: "default" 0.0;
				min: 0 0;
				fixed: 1 0;
				rel2 {
					relative: 0.0 1.0;
				}
				align: 0.0 0.5;
			}
			description { state: "visible" 0.0;
				inherit: "default" 0.0;
				min: TABBAR_ICON_RECT_SIZE_INC;
			}
		}

		part { name: "padding_icon_text";
			type: SPACER;
			scale: 1;
			description { state: "default" 0.0;
				min: 0 0;
				fixed: 1 0;
				align: 1.0 0.5;
				rel1 {
					to_x: "elm.text";
					relative: 0.0 0.0;
				}
				rel2 {
					to_x: "elm.text";
					relative: 0.0 1.0;
				}
			}
			description { state: "visible" 0.0;
				inherit: "default" 0.0;
				min: CALL_SETTING_TABBAR_ICON_TEXT_PAD_INC;
			}
		}

		part { name: "elm.swallow.icon";
			type: SWALLOW;
			scale: 1;
			clip_to: "elm.icon.clipper";
			description { state: "default" 0.0;
				visible: 0;
				min: CALL_SETTING_TABBAR_ICON_SIZE_INC;
				aspect: 1.0 1.0;
				aspect_preference: HORIZONTAL;
			}
			description { state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
				align: 0.8 0.5;
				fixed: 1 1;
				rel1 {
					to_x: "padding_icon_text";
					relative: 0.0 0.0;
				}
				rel2 {
					to_x: "padding_icon_text";
					relative: 0.0 1.0;
				}
			}
			description { state: "visible_icon_only" 0.0;
				inherit: "default" 0.0;
				visible: 1;
				align: 0.5 0.5;
				fixed: 1 1;
				rel1 {
					to: "padding_left_top";
					relative: 1.0 1.0;
					}
				rel2 {
					to: "padding_right_bottom";
					relative: 0.0 0.0;
				}
			}
		}
		part { name: "elm.text";
			type: TEXTBLOCK;
			mouse_events: 0;
			scale: 1;
			clip_to: "elm.text.clipper";
			description { state: "default" 0.0;
			visible: 0;
			}
			description { state: "text" 0.0;
				inherit: "default" 0.0;
				visible: 1;
				rel1 {
					to: "padding_left_top";
					relative: 1.0 1.0;
				}
				rel2 {
					to: "padding_right_bottom";
					relative: 0.0 0.0;
				}
				fixed: 1 1;
				text {
					style: "tabbar_text_style_T1117";
					min: 0 1;
					max: 1 0;
				}
			}
			description { state:"text_pressed" 0.0;
				inherit: "text" 0.0;
				text.style: "tabbar_text_style_T1117P";
			}
			description { state:"text_selected" 0.0;
				inherit: "text" 0.0;
				text.style: "tabbar_text_style_T1117S";
			}
			description { state:"text_disabled" 0.0;
				inherit: "text" 0.0;
				text.style: "tabbar_text_style_T1117D";
			}
			description { state: "icon_text" 0.0;
				inherit: "default" 0.0;
				visible: 1;
				rel1 {
					to_x: "icon_rect";
					to_y: "padding_left_top";
					relative: 1.0 1.0;
				}
				rel2 {
					to: "padding_right_bottom";
					relative: 0.0 0.0;
				}
				fixed: 1 1;
				text {
				style: "tabbar_icon_text_style_T111";
				min: 0 1;
				max: 1 0;
				}
			}
			description { state:"icon_text_pressed" 0.0;
				inherit: "icon_text" 0.0;
				text.style: "tabbar_icon_text_style_T111P";
			}
			description { state:"icon_text_selected" 0.0;
				inherit: "icon_text" 0.0;
				text.style: "tabbar_icon_text_style_T111S";
			}
			description { state:"icon_text_disabled" 0.0;
				inherit: "icon_text" 0.0;
				text.style: "tabbar_icon_text_style_T111D";
			}
		}
		part { name: "elm.icon.clipper";
			type: RECT;
			description { state: "default" 0.0;
				color_class: "B052L6";
			}
			description { state: "selected" 0.0;
				inherit: "default" 0.0;
				color_class: "B052L6S";
			}
			description { state: "pressed" 0.0;
				inherit: "default" 0.0;
				color_class: "B052L6P";
			}
			description { state: "disabled" 0.0;
				inherit: "default" 0.0;
				color_class: "B052L6D";
			}
		}
		part { name: "elm.text.clipper";
			type: RECT;
			description { state: "default" 0.0;
				color: 255 255 255 255;
			}
			description { state: "disabled" 0.0;
				inherit: "default" 0.0;
				color: 255 255 255 255;
			}
		}
		part { name: "event";
			type: RECT;
			mouse_events: 1;
			description { state: "default" 0.0;
				color: 0 0 0 0;
			}
		}
	}
	programs {
		program { name: "go_active";
			signal:  "elm,state,selected";
			source:  "elm";
			action:  STATE_SET "selected" 0.0;
			target:  "elm.icon.clipper";
			target:  "selected_line";
			after: "selected_text";
		}
		program { name: "selected_text";
			script{
				set_int(selected, 1);
				if (!get_int(icon_text))
					set_state(PART:"elm.text", "text_selected", 0.0);
				else
					set_state(PART:"elm.text", "icon_text_selected", 0.0);
			}
		}
		program { name: "go_passive";
			signal:  "elm,state,unselected";
			source:  "elm";
			action:  STATE_SET "default" 0.0;
			target:  "elm.icon.clipper";
			target:  "selected_line";
			after: "unselected_text";
		}
		program { name: "unselected_text";
				script{
				set_int(selected, 0);
				if (!get_int(icon_text))
					set_state(PART:"elm.text", "text", 0.0);
				else
					set_state(PART:"elm.text", "icon_text", 0.0);
			}
		}
		program { name: "key,pressed";
			signal: "elm,action,pressed";
			source: "elm";
			after: "pressed";
		}
		program { name: "pressed";
			signal:  "mouse,down,1";
			source:  "event";
			script {
				if ((get_int(item_state) != ITEM_STATE_DISABLED)
				&& get_int(multi_down) == 0
				&& get_int(mouse_down) == 0)
			{
			set_int(mouse_down, 1);
			set_state(PART:"bg_cover", "pressed", 0.0);
				if (!get_int(icon_text))
					set_state(PART:"elm.text", "text_pressed", 0.0);
				else
					set_state(PART:"elm.text", "icon_text_pressed", 0.0);
				set_state(PART:"elm.icon.clipper", "pressed", 0.0);
				set_int(pressed, 1);
				}
			}
		}
		program { name: "key,unpressed";
			signal: "elm,action,unpressed";
			source: "elm";
			after: "unpressed";
		}
		program { name: "unpressed";
			signal:  "mouse,up,1";
			source:  "event";
			script {
				if ((get_int(item_state) != ITEM_STATE_DISABLED)
				&& get_int(mouse_down) == 1)
				{
					set_int(mouse_down, 0);
					set_int(pressed, 0);
					set_state(PART:"bg_cover", "default", 0.0);
					if (get_int(selected))
					{
						if (!get_int(icon_text))
							set_state(PART:"elm.text", "text_selected", 0.0);
						else
							set_state(PART:"elm.text", "icon_text_selected", 0.0);
						set_state(PART:"elm.icon.clipper", "selected", 0.0);
					}
					else
					{
						if (!get_int(icon_text))
							set_state(PART:"elm.text", "text", 0.0);
						else
							set_state(PART:"elm.text", "icon_text", 0.0);
						set_state(PART:"elm.icon.clipper", "default", 0.0);
					}
				}
			}
		}
		program { name: "go";
			signal:  "mouse,clicked,1";
			source:  "event";
			script {
				if (get_int(multi_down) == 0) {
					emit("elm,action,click", "elm");
				if (get_int(item_state) != ITEM_STATE_DISABLED)
					run_program(PROGRAM:"touch_sound");
				}
			}
		}
		program { name: "touch_sound";
			action: RUN_PLUGIN "touch_sound";
		}
		program { name: "mouse,in";
			signal:  "mouse,in";
			source:  "event";
			script {
				if (get_int(multi_down) == 0)
					emit("elm,mouse,in", "elm");
			}
		}
		program { name: "mouse,out";
			signal:  "mouse,out";
			source:  "event";
			script {
				if ((get_int(multi_down) == 0) && (get_int(mouse_down) == 0))
					emit("elm,mouse,out", "elm");
			}
		}
		program { name: "enable";
			signal: "elm,state,enabled";
			source: "elm";
			script {
				set_int(item_state, ITEM_STATE_ENABLED);
				set_state(PART:"bg_cover", "default", 0.0);
				if (!get_int(icon_text))
					set_state(PART:"elm.text", "text", 0.0);
				else
					set_state(PART:"elm.text", "icon_text", 0.0);
				set_state(PART:"elm.text.clipper", "default", 0.0);
				set_state(PART:"elm.icon.clipper", "default", 0.0);
			}
		}
		program { name: "disable";
			signal: "elm,state,disabled";
			source: "elm";
			script {
				set_int(item_state, ITEM_STATE_DISABLED);
				set_state(PART:"bg_cover", "disabled", 0.0);
				if (!get_int(icon_text))
					set_state(PART:"elm.text", "text_disabled", 0.0);
				else
					set_state(PART:"elm.text", "icon_text_disabled", 0.0);
				set_state(PART:"elm.text.clipper", "disabled", 0.0);
				set_state(PART:"elm.icon.clipper", "disabled", 0.0);
			}
		}
		program {name: "multi_down";
			signal: "elm,action,multi,down";
			source: "elm";
			script {
				set_int(multi_down, 1);
			}
		}
		program {name: "multi_up";
			signal: "elm,action,multi,cancel";
			source: "elm";
			script {
				set_int(multi_down, 0);
			}
		}
		program { name: "text_show";
			signal: "elm,state,text,visible";
			source: "elm";
			script {
				set_int(item_text, 1);
				if (!get_int(icon_text))
				{
					set_state(PART:"elm.text", "text", 0.0);
					set_state(PART:"padding_left_top", "text", 0.0);
					set_state(PART:"padding_right_bottom", "text", 0.0);
				}
				else
				{
					set_state(PART:"elm.swallow.icon", "visible", 0.0);
					set_state(PART:"icon_rect", "visible", 0.0);
					set_state(PART:"elm.text", "icon_text", 0.0);
					set_state(PART:"padding_left_top", "icon_text", 0.0);
					set_state(PART:"padding_right_bottom", "icon_text", 0.0);
				}
			}
		}
		program { name: "text_hide";
			signal: "elm,state,text,hidden";
			source: "elm";
			script {
				set_int(item_text, 0);
				set_state(PART:"elm.text", "default", 0.0);
			}
		}
		program { name: "icon_show";
			signal: "elm,state,icon,visible";
			source: "elm";
			script {
				set_int(icon_text, 1);
				if (get_int(item_text))
				{
					set_state(PART:"elm.swallow.icon", "visible", 0.0);
					set_state(PART:"padding_icon_text", "visible", 0.0);
					set_state(PART:"icon_rect", "visible", 0.0);
				set_state(PART:"elm.text", "icon_text", 0.0);
				}
				else
					set_state(PART:"elm.swallow.icon", "visible_icon_only", 0.0);
					set_state(PART:"padding_left_top", "icon_text", 0.0);
					set_state(PART:"padding_right_bottom", "icon_text", 0.0);
				}
		}
		program { name: "icon_hide";
			signal: "elm,state,icon,hidden";
			source: "elm";
			script {
				set_int(icon_text, 0);
				set_state(PART:"elm.swallow.icon", "default", 0.0);
				set_state(PART:"padding_icon_text", "default", 0.0);
				set_state(PART:"elm.text", "text", 0.0);
				set_state(PART:"padding_left_top", "text", 0.0);
				set_state(PART:"padding_right_bottom", "text", 0.0);
			}
		}
		program { name: "tab_item_2";
			signal: "elm,number,item,2";
			source: "elm";
			script {
				set_int(items_number, 2);
				set_state(PART:"bg", "2items", 0.0);
			}
		}
		program { name: "tab_item_upper_5";
			script {
				if (get_int(landscape))
					set_state(PART:"bg", "scrollable_land", 0.0);
				else
					set_state(PART:"bg", "scrollable", 0.0);
			}
		}
	}
}

 /************************************progressbar*******************************/

group { name: "popup_processingview_1button";
	styles {
		style { name: "popup_processing_style";
		base: "font=Tizen:style=Regular align=left font_size="30" color=#000000 wrap=mixed ellipsis=1.0";
		tag:  "br" "\n";
		tag:  "tab" "\t";
		}
	}
	parts {
		part { name: "base";
			type: SPACER;
			scale: 1;
			description { state: "default" 0.0;
				min: DEMO_POPUP_PROCESSINGVIEW1BUTTON_CONTENT_MIN;
				fixed: 1 0;
			}
		}
		part { name: "pad_l";
			type: SPACER;
			scale: 1;
			description { state: "default" 0.0;
				min: 23 0;
				fixed: 1 0;
            			rel1.relative: 0.0 0.0;
            			rel2.relative: 0.0 1.0;
				align: 0.0 0.0;
			}
		}
		part { name: "pad_r";
			type: SPACER;
			scale: 1;
			description { state: "default" 0.0;
				min: 23 0;
				fixed: 1 0;
           			rel1.relative: 1.0 0.0;
            			rel2.relative: 1.0 1.0;
				align: 1.0 0.0;
			}
		}
		part { name: "elm.swallow.content";
			type: SWALLOW;
			scale: 1;
			description { state: "default" 0.0;
				fixed: 1 1;
				min: 0 58;
				max: 0 58;
				rel1 {
					relative: 1.0 0.0;
					to_x: "pad_l";
				}
				rel2 {
					relative: 0.0 1.0;
					to_x: "pad_r";
				}
				align: 0.0 0.5;
			}
		}
		part { name: "pad_after_processing";
			type: SPACER;
			scale: 1;
			description { state: "default" 0.0;
				fixed: 1 1;
				min: 23 144;
				rel1 {
					relative: 1.0 0.0;
					to: "elm.swallow.content";
				}
				rel2.to: "elm.swallow.content";
				align: 0.0 0.5;
			}
		}
		part { name: "elm.text";
			type: TEXTBLOCK;
			scale : 1;
			description { state: "default" 0.0;
				min: 1 1;
				fixed: 0 1;
				rel1 {
					relative: 1.0 0.0;
					to: "pad_after_processing";
				}
				rel2 {
					relative: 0.0 1.0;
					to_x: "pad_r";
				}
				align: 0.0 0.5;
				text {
					style: "popup_processing_style";
					min: 0 1;
				}
			}
		}
	}
}

	group { name: "popup_checkview";
	   parts {
	      part { name: "pad_t";
	         type: SPACER;
	         scale: 1;
	         description { state: "default" 0.0;
	            align: 0.5 0.0;
	            min: 0 32;
	            fixed: 0 1;
	            rel1 {
	               relative: 1.0 0.0;to_x: "pad_l";
	            }
	            rel2 {
	               relative: 0.0 0.0;to_x: "pad_r";
	            }
	         }
	      }
	      part { name: "pad_l";
	         type: SPACER;
	         scale: 1;
	         description { state: "default" 0.0;
	            min: 26 0;
	            max: 26 0;
	            fixed: 1 0;
	            rel1 {
	               relative: 0.0 0.0;
	            }
	            rel2 {
	               relative: 0.0 1.0;
	            }
	            align: 0.0 0.0;
	         }
	      }
	      part { name: "pad_r";
	         type: SPACER;
	         scale: 1;
	         description { state: "default" 0.0;
	            min: 26 0;
	            max: 26 0;
	            fixed: 1 0;
	            rel1 {
	               relative: 1.0 0.0;
	            }
	            rel2 {
	               relative: 1.0 1.0;
	            }
	            align: 1.0 0.0;
	         }
	      }
	      part { name: "elm.swallow.content";
	         type: SWALLOW;
	         scale: 1;
	         description { state: "default" 0.0;
	            fixed: 1 0;
	            rel1 {
	               relative: 1.0 1.0;
	               to_x: "pad_l";
	               to_y: "pad_t";
	            }
	            rel2 {
	               relative: 0.0 0.0;
	               to_x: "pad_r";
	               to_y: "pad_b";
	            }
	         }
	      }
	      part { name: "bottom_pad";
	         type: SPACER;
	         scale: 1;
	         description { state: "default" 0.0;
	            align: 0.0 1.0;
	            min: 0 32;
	            fixed: 0 1;
	            rel1 {
	               relative: 1.0 1.0;
	               to_x: "pad_l";
	            }
	            rel2 {
	               relative: 0.0 1.0;
	               to_x: "pad_r";
	            }
	         }
	      }
	      part { name: "pad_b";
	         type: SPACER;
	         scale: 1;
	         description { state: "default" 0.0;
	            align: 0.0 1.0;
	            min: 0 121;
	            fixed: 0 1;
	            rel1 {
	               relative: 0.0 0.0;
	               to: "bottom_pad";
	            }
	            rel2 {
	               relative: 1.0 0.0;
	               to: "bottom_pad";
	            }
	         }
	      }
	      part { name: "end_field";
	         type: SPACER;
	         scale: 1;
	         description { state: "default" 0.0;
	            align: 0.0 1.0;
	            min: 0 100;
	            fixed: 0 1;
	            rel1 {
	               relative: 0.0 1.0;
	               to: "pad_b";
	            }
	            rel2 {
	               relative: 1.0 1.0;
	               to: "pad_b";
	            }
	         }
	      }
	      part { name: "elm.swallow.end";
	         type: SWALLOW;
	         scale: 1;
	         description { state: "default" 0.0;
	            fixed: 1 1;
	            align: 0.0 0.5;
	            rel1.to: "end_field";
	            rel2.to: "end_field";
	         }
	      }
	   }
}
 /************************************end of progressbar**************************/

	   STYLE_SIM_BUTTON("sim1_btn", "logs_icon_sim_1.png", "B0561L1P")
	   STYLE_SIM_BUTTON("sim2_btn", "logs_icon_sim_2.png", "B0561L1")

// multiline text + icon
group { name: "elm/genlist/item/multiline_main_1icon_custom/default";

   data.item: "treesize" GENLIST_TREESIZE_DEFAULT;
   data.item: "texts" "elm.text.main";
   data.item: "contents" "elm.icon";
   data.item: "bg_color" "B0211";

   parts {
      LIST_PART_BG
      PART(SWALLOW, "elm.swallow.pad",
         DSC_FROM_L("default" 0.0, );
         mouse_events: 0;
      )
      PART(SPACER, "elm.padding.left",
         DSC_L("default" 0.0,
            "elm.swallow.pad",
            min: LIST_WRAP_PADDING_LEFT_SIZE 96;
            max: LIST_WRAP_PADDING_LEFT_SIZE -1;
         )
      )
      PART(SPACER, "elm.padding.right",
         DSC_FROM_R("default" 0.0,
            min: LIST_WRAP_PADDING_RIGHT_SIZE 96;
            max: LIST_WRAP_PADDING_RIGHT_SIZE -1;
         )
      )
      PART(SPACER, "elm.padding.top",
         DSC_FROM_T("default" 0.0,
            min: 0 10;
            max: -1 29;
         )
      )
      PART(SPACER, "elm.padding.bottom",
         DSC_FROM_B("default" 0.0,
            min: 0 10;
            max: -1 29;
         )
      )
      PART(SPACER, "elm.padding.center.right",
         DSC_R("default" 0.0,
            "elm.icon",
            min: LIST_PADDING_CENTER_RIGHT_SIZE 0;
            max: LIST_PADDING_CENTER_RIGHT_SIZE -1;
         )
      )
      PART(TEXTBLOCK, "elm.text.main",
         DSC_LRTB("default" 0.0,
            "elm.padding.left", "elm.padding.center.right", "elm.padding.top", "elm.padding.bottom",
            min: 0 LIST_TEXT_MAIN_HEIGHT;
            text.min: 0 1;
            text.style: "list_text_multiline_main_custom";
         )
         description { state: "pressed" 0.0;
            inherit: "default" 0.0;
            text.style: "list_text_multiline_main_press_custom";
         }
         description { state: "disabled" 0.0;
            inherit: "default" 0.0;
            text.style: "list_text_multiline_main_dim_custom";
         }
      )
      PART(SWALLOW, "elm.icon",
         DSC_RTB("default" 0.0,
            "elm.padding.right", "elm.padding.top", "elm.padding.bottom",
            fixed: 1 1;
            min: LIST_MULTILINE_ICON_SIZE1;
            max: LIST_MULTILINE_ICON_SIZE1;
         )
      )
   }
   LIST_PROGRAMS( target: "elm.text.main"; )
}

}
